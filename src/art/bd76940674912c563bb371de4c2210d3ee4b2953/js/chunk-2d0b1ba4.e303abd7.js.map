{"version":3,"sources":["webpack:///./src/example/el-dialog-injector.vue?34c7","webpack:///src/example/el-dialog-injector.vue","webpack:///./src/example/el-dialog-injector.vue?50fa","webpack:///./src/example/el-dialog-injector.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","on","handleClick","_v","staticRenderFns","components","methods","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,YAAY,CAACE,GAAG,CAAC,MAAQN,EAAIO,cAAc,CAACP,EAAIQ,GAAG,YAAY,IACxKC,EAAkB,G,kCCgBtB,8FAGA,mCACA,IADA,oCAGA,WAHA,UAGA,mCAHA,iCAIA,yCAJA,cAYA,GACEC,WAAY,GAGZC,QAAS,CACP,YADJ,WACA,8KAIA,qBAEA,KAEA,yBAGA,CAGA,wBAdA,OAIA,EAJA,OAiBA,eAjBA,gDCrC4V,I,YCOxVC,EAAY,eACd,EACAb,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAG,E","file":"js/chunk-2d0b1ba4.e303abd7.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('el-button',{on:{\"click\":_vm.handleClick}},[_vm._v(\"Hello\")])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <el-button @click=\"handleClick\">Hello</el-button>\n\n    <!--这个只需要全局引入一次，本项目已经引入过，所以不需要引入-->\n    <!-- <el-dialog-injector /> -->\n  </div>\n</template>\n\n<script>\n/*\nel-dialog-injector 目标是要解耦弹出框的逻辑以及提供方便弹窗的方法\n*/\n\n// import ElDialogInjector from '@/components/el-dialog-injector/index.jsx';\n\n// 这是一个需要弹窗化的组件，不一定是jsx，不一定是function组件，具体参考vue doc\nconst ExampleComponent = ({ props: { name }, listeners: { confirm, cancel } }) => {\n  // ①. 组件内部需要emit confirm事件，对dialog controller进行肯定行为的操作\n  // cancel 需要返回error对象进行否定行为的操作\n  return <div>\n    <div>Hello, {name}</div>\n    <div>\n      <el-button type=\"primary\" onClick={() => confirm('这里返回一段数据')}>确定</el-button>\n      <el-button onClick={() => cancel(new Error('我错了'))}>取消</el-button>\n    </div>\n  </div>;\n};\n\n// 或者引入其他组件\n// import ExampleComponent from 'path'\n\nexport default {\n  components: {\n    // ElDialogInjector,\n  },\n  methods: {\n    async handleClick() {\n      // 提供$Dialog全局对象\n      // dialogify是一个弹出框化的函数，返回一个thenable的dialog controller对象\n      // await, 或者调用then, 会打开弹窗 并在关闭后返回预期结果，见①\n      const data = await this.$Dialog.dialogify({\n        // 第一个对象必须包含一个is参数，提供需要弹出框化的组件\n        is: ExampleComponent,\n        // 对内部进行传参\n        props: { name: Date.now() },\n        // scopeSlots: { default }\n        // slot的内容\n      }, {\n        // 弹出框上的参数，具体看el-dialog\n        // 弹出框上的props\n        props: { title: 'hello' },\n        // 同时也具备 scopeSlots\n      });\n      console.log(data);\n    },\n  },\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./el-dialog-injector.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./el-dialog-injector.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./el-dialog-injector.vue?vue&type=template&id=cc3ef0ea&\"\nimport script from \"./el-dialog-injector.vue?vue&type=script&lang=js&\"\nexport * from \"./el-dialog-injector.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}