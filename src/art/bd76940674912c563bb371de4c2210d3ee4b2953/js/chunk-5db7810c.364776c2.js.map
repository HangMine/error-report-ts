{"version":3,"sources":["webpack:///./src/views/supplier-backend/components/HTable/uses/useSort.ts","webpack:///./src/views/supplier-backend/components/HTable/uses/usePage.ts"],"names":["getValue","target","name","getDate","row","key","val","isNaN","Date","replace","getWeek","sortString","currentRows","order","sort","a","b","v1","v2","asc","localeCompare","sensitivity","desc","sortInt","sortPercent","sortDate","sortWeek","getSortFn","type","useSort","pageType","that","state","sortType","sortKey","sortOrder","sortParams","getHeader","columns","currentColumns","flat","column","find","item","backSort","load","$parent","frontSort","header","sortFn","_initRows","frontPageMain","sortChange","prop","resetRows","initRows","initColumns","defaultPageOptions","total","currentPage","layout","currentSize","usePage","pageOptions","getPageParams","_type","pageKey","sizeKey","backPageParams","noPageParams","pageNumber","pageSize","pageParams","frontPageOptions","backPageMain","getSlicesRows","page","size","start","end","slice","handleColumns","pageMain","setInitData","rows","sizeChange","pageChange","getFrontPageRows"],"mappings":"sQAgBA,SAASA,EAASC,GAChB,MAAsB,WAAlB,eAAOA,GACFA,EAAOC,KAETD,EAGT,IAKME,EAAU,SAACC,EAASC,GACxB,IAAIC,EAAM,GAAH,OAAMN,EAASI,EAAIC,KAE1B,OAAIE,OAAOD,GACG,OAARA,EAAqB,IAAIE,KAAK,IAClCF,EAAMA,EAAIG,QAAQ,KAAM,KACjB,IAAID,KAAKF,KAEVA,GAGJI,EAAU,SAACN,EAASC,GACxB,IAAIC,EAAMN,EAASI,EAAIC,IAEvB,OADAC,EAAMA,EAAIG,QAAQ,mBAAoB,IAAIA,QAAQ,KAAM,KAChDH,GAGJK,EAAa,SAACC,EAAmBP,EAAYQ,GACjDD,EAAYE,MAAK,SAACC,EAAGC,GACnB,IAAMC,EAAMF,EAAEV,IAAQU,EAAEV,GAAKH,MAAjB,UAA4Ba,EAAEV,GAAKH,OAApC,UAAkDa,EAAEV,KAAU,GACnEa,EAAMF,EAAEX,IAAQW,EAAEX,GAAKH,MAAjB,UAA4Bc,EAAEX,GAAKH,OAApC,UAAkDc,EAAEX,KAAU,GACnEc,EAAMF,EAAGG,cAAcF,EAAI,aAAc,CAC7CG,YAAa,WAETC,EAAOJ,EAAGE,cAAcH,EAAI,aAAc,CAC9CI,YAAa,WAEf,MAAiB,cAAVR,EAAwBM,EAAMG,MAInCC,EAAU,SAACX,EAAmBP,EAAYQ,GAC9CD,EAAYE,MAAK,SAACC,EAAGC,GACnB,IAAMC,EAAK,GAAH,OAAOF,EAAEV,IAAQU,EAAEV,GAAKH,MAASa,EAAEV,IACrCa,EAAK,GAAH,OAAOF,EAAEX,IAAQW,EAAEX,GAAKH,MAASc,EAAEX,IAG3C,OAFAY,EAAGR,QAAQ,KAAM,KAAKA,QAAQ,SAAU,IACxCS,EAAGT,QAAQ,KAAM,KAAKA,QAAQ,SAAU,IACvB,cAAVI,GAAyBI,GAAMC,GAAMA,GAAMD,MAIhDO,EAAc,SAACZ,EAAmBP,EAAYQ,GAClDD,EAAYE,MAAK,SAACC,EAAGC,GACnB,IAAMC,EAAK,GAAH,OAAOF,EAAEV,IAAQU,EAAEV,GAAKH,MAASa,EAAEV,IACrCa,EAAK,GAAH,OAAOF,EAAEX,IAAQW,EAAEX,GAAKH,MAASc,EAAEX,IAS3C,OARAY,EACGR,QAAQ,IAAK,IACbA,QAAQ,KAAM,KACdA,QAAQ,SAAU,IACrBS,EACGT,QAAQ,IAAK,IACbA,QAAQ,KAAM,KACdA,QAAQ,SAAU,IACJ,cAAVI,GAAyBI,GAAMC,GAAMA,GAAMD,MAIhDQ,EAAW,SAACb,EAAmBP,EAAYQ,GAC/CD,EAAYE,MAAK,SAACC,EAAGC,GACnB,IAAMC,EAAKd,EAAQY,EAAGV,GAChBa,EAAKf,EAAQa,EAAGX,GACtB,MAAiB,cAAVQ,GAAyBI,GAAMC,GAAMA,GAAMD,MAIhDS,EAAW,SAACd,EAAmBP,EAAYQ,GAC/CD,EAAYE,MAAK,SAACC,EAAGC,GACnB,IAAMC,EAAKP,EAAQK,EAAGV,GAChBa,EAAKR,EAAQM,EAAGX,GACtB,MAAiB,cAAVQ,EAAwBI,EAAKC,EAAKA,EAAKD,MAI5CU,EAAY,SAACC,GACjB,OAAQA,GACN,IAAK,SACL,QACE,OAAOjB,EACT,IAAK,MACH,OAAOY,EACT,IAAK,UACH,OAAOC,EACT,IAAK,OACH,OAAOC,EACT,IAAK,OACH,OAAOC,IAIPG,EAAU,SAACC,GACf,IAAMC,EAAW,kCAEXC,EAAQ,sBAAS,CACrBC,SAAU,GACVC,QAAS,GACTC,UAAW,KAGPC,EAAa,uBAAS,WAC1B,MAAiB,UAAbN,GAAyBE,EAAMG,UAC5B,CACLD,QAASF,EAAME,QACfC,UAAWH,EAAMG,WAHkC,MAOjDE,EAAY,SAAChC,GACjB,IAAMiC,EAAUP,EAAKQ,eAAeC,OAC9BC,EAASH,EAAQI,MAAK,SAACC,GAAD,OAAcA,EAAKtC,MAAQA,KACvD,OAAOoC,GAIHG,EAAW,WACfb,EAAKc,KAAOd,EAAKc,OAASd,EAAKe,QAAQD,QAInCE,EAAY,WAChB,IAAMC,EAASX,EAAUL,EAAME,SAC/B,GAAKc,EAAL,CACAhB,EAAMC,SAAWe,EAAOlC,KACxB,IAAMmC,EAAStB,EAAUK,EAAMC,UAEzBiB,EAAY,eAAI,eACtBD,EAAOC,EAAWlB,EAAME,QAASF,EAAMG,WACvCJ,EAAKoB,cAAcD,KAIfE,EAAa,SAACX,GAClBT,EAAME,QAAUO,EAAOY,KACvBrB,EAAMG,UAAYM,EAAO5B,MACpB4B,EAAO5B,MAKE,SAAdkB,EAAKH,KAAkBgB,IAAaG,IAHlChB,EAAKuB,aAMT,wCACK,oBAAOtB,IADZ,IAEEI,aACAgB,gBAIW,gB,kLCvKJG,EAAiB,GAGjBC,EAAoB,GAEzBC,EAAqB,CACzBC,MAAO,EACPC,YAAa,EACbC,OAAQ,oBACRC,YAAa,IAUTC,EAAU,SAAC,GAAgC,IAA9BlC,EAA8B,EAA9BA,KAAMmC,EAAwB,EAAxBA,YACjBhC,EAAW,kCACXC,EAAQ,sBAAS,CACrB+B,YAAa,iCAAKN,GAAwBM,GAAe,MAGrDC,EAAgB,WAAgC,UAA/BC,EAA+B,uDAARrC,EACtCsC,EAAO,UAAGlC,EAAM+B,YAAYG,eAArB,QAAgC,aACvCC,EAAO,UAAGnC,EAAM+B,YAAYI,eAArB,QAAgC,WACvCC,GAAc,sBACjBF,EAAUlC,EAAM+B,YAAYJ,aADX,iBAEjBQ,EAAUnC,EAAM+B,YAAYF,aAFX,GAIdQ,EAAe,CAAEC,WAAY,EAAGC,SAAU,OAEhD,OAAQR,EAAuC,SAAVE,EAAmBG,EAAiB,GAAnDC,GAGlBG,EAAa,uBAAS,kBAAMR,OAG5BS,EAAmB,uBAAS,kBAAMT,EAAc,WAGhDU,EAAe,WACnB3C,EAAKc,QAID8B,EAAgB,WAAyB,IAAxBzB,EAAwB,uDAAZK,EACjC,IAAKQ,EAAa,OAAOb,EACzB,IAAM0B,EAAO5C,EAAM+B,YAAYJ,YACzBkB,EAAO7C,EAAM+B,YAAYF,YACzBiB,GAASF,EAAO,GAAKC,EACrBE,EAAMH,EAAOC,EACnB,OAAO3B,EAAU8B,MAAMF,EAAOC,IAI1B5B,EAAgB,WAAyB,IAAxBD,EAAwB,uDAAZK,EACjCxB,EAAKnB,YAAc+D,EAAczB,GACjCnB,EAAKQ,eAAiBR,EAAKkD,cAAczB,IAIrC0B,EAAW,WACN,SAATtD,EAAkB8C,IAAiBvB,KAI/BgC,EAAc,SAACC,EAAY9C,GAC/BiB,EAAW6B,EACX5B,EAAclB,GAIV+C,EAAa,SAACR,GAClB7C,EAAM+B,YAAYF,YAAcgB,EAE5BA,EAAO7C,EAAM+B,YAAYJ,YAAc3B,EAAM+B,YAAYL,OAC7DwB,KAGII,EAAa,SAACV,GAClB5C,EAAM+B,YAAYJ,YAAciB,EAChCM,KAIIK,EAAmB,SAACH,EAAY9C,GAEpC,OADA6C,EAAYC,EAAM9C,GACXqC,EAAcS,IAGvB,wCACK,oBAAOpD,IADZ,IAEEwC,aACAC,mBACAY,aACAC,aACAC,sBAIW","file":"js/chunk-5db7810c.364776c2.js","sourcesContent":["import {\n  reactive, computed, toRefs, getCurrentInstance,\n} from '@vue/composition-api';\nimport { Obj } from '../type';\n\nimport { initRows } from './usePage';\n\ntype SortTypes = 'string' | 'int' | 'percent' | 'date' |'week';\n\ntype OrderTypes = 'ascending'|'decending';\n\ntype Target = string | number | {name:string, [otherKey:string]:any};\n\nfunction getValue(target:string):string;\nfunction getValue(target:number):number;\nfunction getValue(target:{name:string, [otherKey:string]:any}):string|number;\nfunction getValue(target:Target) {\n  if (typeof target === 'object') {\n    return target.name;\n  }\n  return target;\n}\n\nconst getNumber = (row:Obj, key:string) => {\n  const val = `${getValue(row[key])}`;\n  return +val.replace(/[^\\d.]/g, '');\n};\n\nconst getDate = (row:Obj, key:string) => {\n  let val = `${getValue(row[key])}`;\n  // eslint-disable-next-line no-restricted-globals\n  if (isNaN(+val)) {\n    if (val === '--') return new Date(0); // 兼容'--'的情况\n    val = val.replace(/-/g, '/');\n    return new Date(val);\n  }\n  return +val;\n};\n\nconst getWeek = (row:Obj, key:string) => {\n  let val = getValue(row[key]);\n  val = val.replace(/[\\u4e00-\\u9fa5]/g, '').replace(/-/g, ''); // 去除中文和-\n  return +val;\n};\n\nconst sortString = (currentRows:Obj[], key:string, order:OrderTypes) => {\n  currentRows.sort((a, b) => {\n    const v1 = (a[key] && a[key].name && `${a[key].name}`) || `${a[key]}` || '';\n    const v2 = (b[key] && b[key].name && `${b[key].name}`) || `${b[key]}` || '';\n    const asc = v1.localeCompare(v2, 'zh-Hans-CN', {\n      sensitivity: 'accent',\n    });\n    const desc = v2.localeCompare(v1, 'zh-Hans-CN', {\n      sensitivity: 'accent',\n    });\n    return order === 'ascending' ? asc : desc;\n  });\n};\n\nconst sortInt = (currentRows:Obj[], key:string, order:OrderTypes) => {\n  currentRows.sort((a, b) => {\n    const v1 = `${(a[key] && a[key].name) || a[key]}`;\n    const v2 = `${(b[key] && b[key].name) || b[key]}`;\n    v1.replace('--', '0').replace(/\\(.+\\)/, '');\n    v2.replace('--', '0').replace(/\\(.+\\)/, '');\n    return order === 'ascending' ? +v1 - +v2 : +v2 - +v1;\n  });\n};\n\nconst sortPercent = (currentRows:Obj[], key:string, order:OrderTypes) => {\n  currentRows.sort((a, b) => {\n    const v1 = `${(a[key] && a[key].name) || a[key]}`;\n    const v2 = `${(b[key] && b[key].name) || b[key]}`;\n    v1\n      .replace('%', '')\n      .replace('--', '0')\n      .replace(/\\(.+\\)/, '');\n    v2\n      .replace('%', '')\n      .replace('--', '0')\n      .replace(/\\(.+\\)/, '');\n    return order === 'ascending' ? +v1 - +v2 : +v2 - +v1;\n  });\n};\n\nconst sortDate = (currentRows:Obj[], key:string, order:OrderTypes) => {\n  currentRows.sort((a, b) => {\n    const v1 = getDate(a, key);\n    const v2 = getDate(b, key);\n    return order === 'ascending' ? +v1 - +v2 : +v2 - +v1;\n  });\n};\n\nconst sortWeek = (currentRows:Obj[], key:string, order:OrderTypes) => {\n  currentRows.sort((a, b) => {\n    const v1 = getWeek(a, key);\n    const v2 = getWeek(b, key);\n    return order === 'ascending' ? v1 - v2 : v2 - v1;\n  });\n};\n\nconst getSortFn = (type:SortTypes) => {\n  switch (type) {\n    case 'string':\n    default:\n      return sortString;\n    case 'int':\n      return sortInt;\n    case 'percent':\n      return sortPercent;\n    case 'date':\n      return sortDate;\n    case 'week':\n      return sortWeek;\n  }\n};\n\nconst useSort = (pageType:'front'|'back') => {\n  const that:any = getCurrentInstance();\n\n  const state = reactive({\n    sortType: '' as SortTypes,\n    sortKey: '', // 列\n    sortOrder: '' as OrderTypes,\n  });\n\n  const sortParams = computed(() => {\n    if (pageType === 'front' || !state.sortOrder) return {};\n    return {\n      sortKey: state.sortKey,\n      sortOrder: state.sortOrder,\n    };\n  });\n\n  const getHeader = (key:string) => {\n    const columns = that.currentColumns.flat();\n    const column = columns.find((item:Obj) => item.key === key);\n    return column;\n  };\n\n  // 后端排序\n  const backSort = () => {\n    that.load ? that.load() : that.$parent.load();\n  };\n\n  // 前端排序\n  const frontSort = () => {\n    const header = getHeader(state.sortKey);\n    if (!header) return; // 兼容切换表头时找不到数据的报错\n    state.sortType = header.sort;\n    const sortFn = getSortFn(state.sortType);\n    // 正常排序\n    const _initRows = [...initRows];\n    sortFn(_initRows, state.sortKey, state.sortOrder);\n    that.frontPageMain(_initRows);\n  };\n\n  // 排序\n  const sortChange = (column:{prop:string, order:OrderTypes}) => {\n    state.sortKey = column.prop;\n    state.sortOrder = column.order;\n    if (!column.order) {\n      // 不排序时回复原来排序\n      that.resetRows();\n      return;\n    }\n    that.type === 'back' ? backSort() : frontSort();\n  };\n\n  return {\n    ...toRefs(state),\n    sortParams,\n    sortChange,\n  };\n};\n\nexport default useSort;\n","import {\n  reactive, computed, toRefs, getCurrentInstance,\n} from '@vue/composition-api';\nimport { Pagination } from 'element-ui';\nimport { Obj } from '../type';\n// 只是保存数据，不需要双向绑定那套重逻辑\n\n// 前端分页需要保存初始数据，从里面切割\n// eslint-disable-next-line import/no-mutable-exports\nexport let initRows:Obj[] = [];\n// 前端分页需要保存初始数据，重新计算表头宽度\n// eslint-disable-next-line import/no-mutable-exports\nexport let initColumns:Obj[] = [];\n\nconst defaultPageOptions = {\n  total: 0,\n  currentPage: 1,\n  layout: 'prev, pager, next',\n  currentSize: 10,\n  // pageSizes: [10, 20, 30, 40, 50],\n  // layout: 'total, sizes, prev, pager, next, jumper',\n};\n\ninterface Params {\n  type:'back'|'front'\n  pageOptions:Pagination & {pageKey?:string, sizeKey?:string} | false\n}\n\nconst usePage = ({ type, pageOptions }:Params) => {\n  const that:any = getCurrentInstance();\n  const state = reactive({\n    pageOptions: { ...defaultPageOptions, ...(pageOptions || {}) },\n  });\n\n  const getPageParams = (_type:'back'|'front' = type) => {\n    const pageKey = state.pageOptions.pageKey ?? 'pageNumber';\n    const sizeKey = state.pageOptions.sizeKey ?? 'pageSize';\n    const backPageParams = {\n      [pageKey]: state.pageOptions.currentPage,\n      [sizeKey]: state.pageOptions.currentSize,\n    };\n    const noPageParams = { pageNumber: 1, pageSize: 99999 };// 99999是为了支持服务端接口\n    // eslint-disable-next-line no-nested-ternary\n    return !pageOptions ? noPageParams : _type === 'back' ? backPageParams : {};\n  };\n\n  const pageParams = computed(() => getPageParams());\n\n  // type为'front'时也获取到参数\n  const frontPageOptions = computed(() => getPageParams('back'));\n\n  // 后端分页主逻辑\n  const backPageMain = () => {\n    that.load();\n  };\n\n  // 获取切割后的数据\n  const getSlicesRows = (_initRows = initRows) => {\n    if (!pageOptions) return _initRows;\n    const page = state.pageOptions.currentPage;\n    const size = state.pageOptions.currentSize;\n    const start = (page - 1) * size;\n    const end = page * size;\n    return _initRows.slice(start, end);\n  };\n\n  // 前端分页主逻辑\n  const frontPageMain = (_initRows = initRows) => {\n    that.currentRows = getSlicesRows(_initRows);\n    that.currentColumns = that.handleColumns(initColumns);\n  };\n\n  // 分页主逻辑函数\n  const pageMain = () => {\n    type === 'back' ? backPageMain() : frontPageMain();\n  };\n\n  // 设置前端分页需要保存的初始数据\n  const setInitData = (rows:Obj[], columns:Obj[]) => {\n    initRows = rows;\n    initColumns = columns;\n  };\n\n  // 分页事件\n  const sizeChange = (size:number) => {\n    state.pageOptions.currentSize = size;\n    // elementUI会处理成最后一页，触发pageChange\n    if (size * state.pageOptions.currentPage > state.pageOptions.total) return;\n    pageMain();\n  };\n\n  const pageChange = (page:number) => {\n    state.pageOptions.currentPage = page;\n    pageMain();\n  };\n\n  // 获取前端分页的数据\n  const getFrontPageRows = (rows:Obj[], columns:Obj[]) => {\n    setInitData(rows, columns);\n    return getSlicesRows(rows);\n  };\n\n  return {\n    ...toRefs(state),\n    pageParams,\n    frontPageOptions,\n    sizeChange,\n    pageChange,\n    getFrontPageRows,\n  };\n};\n\nexport default usePage;\n"],"sourceRoot":""}