{"version":3,"sources":["webpack:///./src/views/supplier-backend/components/HTable/uses/usePage.ts"],"names":["initRows","initColumns","defaultPageOptions","total","currentPage","layout","currentSize","usePage","type","pageOptions","that","state","getPageParams","_type","pageKey","sizeKey","backPageParams","noPageParams","pageNumber","pageSize","pageParams","frontPageOptions","backPageMain","load","getSlicesRows","_initRows","page","size","start","end","slice","frontPageMain","currentRows","currentColumns","handleColumns","pageMain","setInitData","rows","columns","sizeChange","pageChange","getFrontPageRows"],"mappings":"gQASWA,EAAiB,GAGjBC,EAAoB,GAEzBC,EAAqB,CACzBC,MAAO,EACPC,YAAa,EACbC,OAAQ,oBACRC,YAAa,IAUTC,EAAU,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,YACjBC,EAAW,kCACXC,EAAQ,sBAAS,CACrBF,YAAa,iCAAKP,GAAwBO,GAAe,MAGrDG,EAAgB,WAAgC,UAA/BC,EAA+B,uDAARL,EACtCM,EAAO,UAAGH,EAAMF,YAAYK,eAArB,QAAgC,aACvCC,EAAO,UAAGJ,EAAMF,YAAYM,eAArB,QAAgC,WACvCC,GAAc,sBACjBF,EAAUH,EAAMF,YAAYL,aADX,iBAEjBW,EAAUJ,EAAMF,YAAYH,aAFX,GAIdW,EAAe,CAAEC,WAAY,EAAGC,SAAU,OAEhD,OAAQV,EAAuC,SAAVI,EAAmBG,EAAiB,GAAnDC,GAGlBG,EAAa,uBAAS,kBAAMR,OAG5BS,EAAmB,uBAAS,kBAAMT,EAAc,WAGhDU,EAAe,WACnBZ,EAAKa,QAIDC,EAAgB,WAAyB,IAAxBC,EAAwB,uDAAZzB,EACjC,IAAKS,EAAa,OAAOgB,EACzB,IAAMC,EAAOf,EAAMF,YAAYL,YACzBuB,EAAOhB,EAAMF,YAAYH,YACzBsB,GAASF,EAAO,GAAKC,EACrBE,EAAMH,EAAOC,EACnB,OAAOF,EAAUK,MAAMF,EAAOC,IAI1BE,EAAgB,WAAyB,IAAxBN,EAAwB,uDAAZzB,EACjCU,EAAKsB,YAAcR,EAAcC,GACjCf,EAAKuB,eAAiBvB,EAAKwB,cAAcjC,IAIrCkC,EAAW,WACN,SAAT3B,EAAkBc,IAAiBS,KAI/BK,EAAc,SAACC,EAAYC,GAC/BtC,EAAWqC,EACXpC,EAAcqC,GAIVC,EAAa,SAACZ,GAClBhB,EAAMF,YAAYH,YAAcqB,EAE5BA,EAAOhB,EAAMF,YAAYL,YAAcO,EAAMF,YAAYN,OAC7DgC,KAGIK,EAAa,SAACd,GAClBf,EAAMF,YAAYL,YAAcsB,EAChCS,KAIIM,EAAmB,SAACJ,EAAYC,GAEpC,OADAF,EAAYC,EAAMC,GACXd,EAAca,IAGvB,wCACK,oBAAO1B,IADZ,IAEES,aACAC,mBACAkB,aACAC,aACAC,sBAIW","file":"js/chunk-2d0f0de4.2b291be4.js","sourcesContent":["import {\n  reactive, computed, toRefs, getCurrentInstance,\n} from '@vue/composition-api';\nimport { Pagination } from 'element-ui';\nimport { Obj } from '../type';\n// 只是保存数据，不需要双向绑定那套重逻辑\n\n// 前端分页需要保存初始数据，从里面切割\n// eslint-disable-next-line import/no-mutable-exports\nexport let initRows:Obj[] = [];\n// 前端分页需要保存初始数据，重新计算表头宽度\n// eslint-disable-next-line import/no-mutable-exports\nexport let initColumns:Obj[] = [];\n\nconst defaultPageOptions = {\n  total: 0,\n  currentPage: 1,\n  layout: 'prev, pager, next',\n  currentSize: 10,\n  // pageSizes: [10, 20, 30, 40, 50],\n  // layout: 'total, sizes, prev, pager, next, jumper',\n};\n\ninterface Params {\n  type:'back'|'front'\n  pageOptions:Pagination & {pageKey?:string, sizeKey?:string} | false\n}\n\nconst usePage = ({ type, pageOptions }:Params) => {\n  const that:any = getCurrentInstance();\n  const state = reactive({\n    pageOptions: { ...defaultPageOptions, ...(pageOptions || {}) },\n  });\n\n  const getPageParams = (_type:'back'|'front' = type) => {\n    const pageKey = state.pageOptions.pageKey ?? 'pageNumber';\n    const sizeKey = state.pageOptions.sizeKey ?? 'pageSize';\n    const backPageParams = {\n      [pageKey]: state.pageOptions.currentPage,\n      [sizeKey]: state.pageOptions.currentSize,\n    };\n    const noPageParams = { pageNumber: 1, pageSize: 99999 };// 99999是为了支持服务端接口\n    // eslint-disable-next-line no-nested-ternary\n    return !pageOptions ? noPageParams : _type === 'back' ? backPageParams : {};\n  };\n\n  const pageParams = computed(() => getPageParams());\n\n  // type为'front'时也获取到参数\n  const frontPageOptions = computed(() => getPageParams('back'));\n\n  // 后端分页主逻辑\n  const backPageMain = () => {\n    that.load();\n  };\n\n  // 获取切割后的数据\n  const getSlicesRows = (_initRows = initRows) => {\n    if (!pageOptions) return _initRows;\n    const page = state.pageOptions.currentPage;\n    const size = state.pageOptions.currentSize;\n    const start = (page - 1) * size;\n    const end = page * size;\n    return _initRows.slice(start, end);\n  };\n\n  // 前端分页主逻辑\n  const frontPageMain = (_initRows = initRows) => {\n    that.currentRows = getSlicesRows(_initRows);\n    that.currentColumns = that.handleColumns(initColumns);\n  };\n\n  // 分页主逻辑函数\n  const pageMain = () => {\n    type === 'back' ? backPageMain() : frontPageMain();\n  };\n\n  // 设置前端分页需要保存的初始数据\n  const setInitData = (rows:Obj[], columns:Obj[]) => {\n    initRows = rows;\n    initColumns = columns;\n  };\n\n  // 分页事件\n  const sizeChange = (size:number) => {\n    state.pageOptions.currentSize = size;\n    // elementUI会处理成最后一页，触发pageChange\n    if (size * state.pageOptions.currentPage > state.pageOptions.total) return;\n    pageMain();\n  };\n\n  const pageChange = (page:number) => {\n    state.pageOptions.currentPage = page;\n    pageMain();\n  };\n\n  // 获取前端分页的数据\n  const getFrontPageRows = (rows:Obj[], columns:Obj[]) => {\n    setInitData(rows, columns);\n    return getSlicesRows(rows);\n  };\n\n  return {\n    ...toRefs(state),\n    pageParams,\n    frontPageOptions,\n    sizeChange,\n    pageChange,\n    getFrontPageRows,\n  };\n};\n\nexport default usePage;\n"],"sourceRoot":""}