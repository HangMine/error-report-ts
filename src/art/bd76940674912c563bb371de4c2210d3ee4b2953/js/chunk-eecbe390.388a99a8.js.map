{"version":3,"sources":["webpack:///./src/views/supplier-backend/components/HTable/mixin/sort.js","webpack:///./src/views/supplier-backend/components/HTable/mixin/page.js"],"names":["getDate","val","key","name","isNaN","Date","replace","getWeek","sortString","currentRows","order","sort","a","b","v1","v2","asc","localeCompare","sensitivity","desc","sortInt","sortPercent","sortDate","sortWeek","getSortFn","type","data","sortType","sortKey","sortOrder","computed","sortParams","this","methods","sortChange","column","prop","backSort","frontSort","resetRows","header","getHeader","sortFn","_initRows","initRows","frontPageMain","load","$parent","columns","currentColumns","flat","find","item","pageMain","initColumns","props","String","default","page","Object","Boolean","pageOptions","total","currentPage","layout","currentSize","pageParams","backPageParams","pageNumber","pageSize","watch","handler","immediate","sizeChange","size","pageChange","backPageMain","getSlicesRows","handleColumns","getFrontPageRows","rows","setInitData","start","end","slice"],"mappings":"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","file":"js/chunk-eecbe390.388a99a8.js","sourcesContent":["import { initRows } from './page';\n\nconst getNumber = item => {\n  const value = `${(item && item.name) || item}`;\n  return +value.replace(/[^\\d.]/g, '');\n};\nconst getDate = (val, key) => {\n  val = (val[key] && val[key].name) || val[key];\n  // eslint-disable-next-line no-restricted-globals\n  if (isNaN(val)) {\n    if (val === '--') return new Date(0); // 兼容'--'的情况\n    val = val.replace(/-/g, '/');\n    return new Date(val);\n  }\n  return +val;\n};\n\nconst getWeek = (val, key) => {\n  val = (val[key] && val[key].name) || val[key];\n  val = val.replace(/[\\u4e00-\\u9fa5]/g, '').replace(/-/g, ''); // 去除中文和-\n  return +val;\n};\n\nconst sortString = (currentRows, key, order) => {\n  currentRows.sort((a, b) => {\n    const v1 = (a[key] && a[key].name && `${a[key].name}`) || `${a[key]}` || '';\n    const v2 = (b[key] && b[key].name && `${b[key].name}`) || `${b[key]}` || '';\n    const asc = v1.localeCompare(v2, 'zh-Hans-CN', {\n      sensitivity: 'accent',\n    });\n    const desc = v2.localeCompare(v1, 'zh-Hans-CN', {\n      sensitivity: 'accent',\n    });\n    return order === 'ascending' ? asc : desc;\n  });\n};\nconst sortInt = (currentRows, key, order) => {\n  currentRows.sort((a, b) => {\n    let v1 = `${(a[key] && a[key].name) || a[key]}`;\n    let v2 = `${(b[key] && b[key].name) || b[key]}`;\n    v1 = +v1.replace('--', 0).replace(/\\(.+\\)/, '');\n    v2 = +v2.replace('--', 0).replace(/\\(.+\\)/, '');\n    return order === 'ascending' ? v1 - v2 : v2 - v1;\n  });\n};\nconst sortPercent = (currentRows, key, order) => {\n  currentRows.sort((a, b) => {\n    let v1 = `${(a[key] && a[key].name) || a[key]}`;\n    let v2 = `${(b[key] && b[key].name) || b[key]}`;\n    v1 = +v1\n      .replace('%', '')\n      .replace('--', 0)\n      .replace(/\\(.+\\)/, '');\n    v2 = +v2\n      .replace('%', '')\n      .replace('--', 0)\n      .replace(/\\(.+\\)/, '');\n    return order === 'ascending' ? v1 - v2 : v2 - v1;\n  });\n};\n\nconst sortDate = (currentRows, key, order) => {\n  currentRows.sort((a, b) => {\n    const v1 = getDate(a, key);\n    const v2 = getDate(b, key);\n    return order === 'ascending' ? v1 - v2 : v2 - v1;\n  });\n};\nconst sortWeek = (currentRows, key, order) => {\n  currentRows.sort((a, b) => {\n    const v1 = getWeek(a, key);\n    const v2 = getWeek(b, key);\n    return order === 'ascending' ? v1 - v2 : v2 - v1;\n  });\n};\n\nconst getSortFn = type => {\n  switch (type) {\n    case 'string':\n      return sortString;\n    case 'int':\n      return sortInt;\n    case 'percent':\n      return sortPercent;\n    case 'date':\n      return sortDate;\n    case 'week':\n      return sortWeek;\n    default:\n      return false;\n  }\n};\n\nexport default {\n  data() {\n    return {\n      sortType: '', // string | int | percent | date | week\n      sortKey: '', // 列\n      sortOrder: '', // ascending/descending\n    };\n  },\n  computed: {\n    sortParams() {\n      if (this.type === 'front' || !this.sortOrder) return {};\n      return {\n        sortKey: this.sortKey,\n        sortOrder: this.sortOrder,\n      };\n    },\n  },\n  methods: {\n    // 排序\n    sortChange(column) {\n      this.sortKey = column.prop;\n      this.sortOrder = column.order;\n      if (!column.order) {\n        // 不排序时回复原来排序\n        this.resetRows();\n        return;\n      }\n      this.type === 'back' ? this.backSort() : this.frontSort();\n    },\n    // 前端排序\n    frontSort() {\n      const header = this.getHeader(this.sortKey);\n      if (!header) return; // 兼容切换表头时找不到数据的报错\n      this.sortType = header.sort;\n      const sortFn = getSortFn(this.sortType);\n      // 正常排序\n      const _initRows = [...initRows];\n      sortFn(_initRows, this.sortKey, this.sortOrder);\n      this.frontPageMain(_initRows);\n    },\n    // 后端排序\n    backSort() {\n      this.load ? this.load() : this.$parent.load();\n    },\n\n    getHeader(key) {\n      const columns = this.currentColumns.flat();\n      const column = columns.find(item => item.key === key);\n      return column;\n    },\n    resetRows() {\n      // 调用 page mixin的函数\n      this.pageMain();\n    },\n  },\n};\n","// 只是保存数据，不需要双向绑定那套重逻辑\n\n// 前端分页需要保存初始数据，从里面切割\n// eslint-disable-next-line import/no-mutable-exports\nexport let initRows = [];\n// 前端分页需要保存初始数据，重新计算表头宽度\n// eslint-disable-next-line import/no-mutable-exports\nexport let initColumns = [];\n\nexport default {\n  props: {\n    type: {\n      type: String,\n      default: 'back',\n    },\n    // 分页相关参数,详情参照element 的分页组件,可通过false取消分页\n    page: {\n      type: [Object, Boolean],\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      // 分页\n      pageOptions: {\n        total: 0,\n        currentPage: 1,\n        layout: 'prev, pager, next',\n        currentSize: 10,\n        // pageSizes: [10, 20, 30, 40, 50],\n        // layout: 'total, sizes, prev, pager, next, jumper',\n      },\n    };\n  },\n  computed: {\n    // 分页参数\n    pageParams() {\n      const backPageParams = {\n        pageNumber: this.pageOptions.currentPage,\n        pageSize: this.pageOptions.currentSize,\n      };\n      return this.type === 'back' && this.page ? backPageParams : {};\n    },\n  },\n  watch: {\n    page: {\n      handler(val) {\n        this.pageOptions = { ...this.pageOptions, ...val };\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    // 分页事件\n    sizeChange(size) {\n      this.pageOptions.currentSize = size;\n      // elementUI会处理成最后一页，触发pageChange\n      if (size * this.pageOptions.currentPage > this.pageOptions.total) return;\n      this.pageMain();\n    },\n    pageChange(page) {\n      this.pageOptions.currentPage = page;\n      this.pageMain();\n    },\n    // 分页主逻辑函数\n    pageMain() {\n      this.type === 'back' ? this.backPageMain() : this.frontPageMain();\n    },\n    // 后端分页主逻辑\n    backPageMain() {\n      this.load();\n    },\n    // 前端分页主逻辑\n    frontPageMain(_initRows = initRows) {\n      this.currentRows = this.getSlicesRows(_initRows);\n      this.currentColumns = this.handleColumns(initColumns);\n    },\n    // 获取前端分页的数据\n    getFrontPageRows(rows, columns) {\n      this.setInitData(rows, columns);\n      return this.getSlicesRows(rows);\n    },\n    // 设置前端分页需要保存的初始数据\n    setInitData(rows, columns) {\n      initRows = rows;\n      initColumns = columns;\n    },\n    // 获取切割后的数据\n    getSlicesRows(_initRows = initRows) {\n      if (!this.page) return _initRows;\n      const page = this.pageOptions.currentPage;\n      const size = this.pageOptions.currentSize;\n      const start = (page - 1) * size;\n      const end = page * size;\n      return _initRows.slice(start, end);\n    },\n  },\n};\n"],"sourceRoot":""}