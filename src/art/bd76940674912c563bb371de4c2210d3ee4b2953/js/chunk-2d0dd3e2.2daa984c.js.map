{"version":3,"sources":["webpack:///./src/views/supplier-backend/components/HTable/mixin/page.js"],"names":["initRows","initColumns","props","type","String","default","page","Object","Boolean","data","pageOptions","total","currentPage","layout","currentSize","computed","pageParams","backPageParams","pageNumber","this","pageSize","watch","handler","val","immediate","methods","sizeChange","size","pageMain","pageChange","backPageMain","frontPageMain","load","_initRows","currentRows","getSlicesRows","currentColumns","handleColumns","getFrontPageRows","rows","columns","setInitData","start","end","slice"],"mappings":"wOAIWA,EAAW,GAGXC,EAAc,GAEV,cACbC,MAAO,CACLC,KAAM,CACJA,KAAMC,OACNC,QAAS,QAGXC,KAAM,CACJH,KAAM,CAACI,OAAQC,SACfH,QAAS,iBAAO,MAGpBI,KAZa,WAaX,MAAO,CAELC,YAAa,CACXC,MAAO,EACPC,YAAa,EACbC,OAAQ,oBACRC,YAAa,MAMnBC,SAAU,CAERC,WAFQ,WAGN,IAAMC,EAAiB,CACrBC,WAAYC,KAAKT,YAAYE,YAC7BQ,SAAUD,KAAKT,YAAYI,aAE7B,MAAqB,SAAdK,KAAKhB,MAAmBgB,KAAKb,KAAOW,EAAiB,KAGhEI,MAAO,CACLf,KAAM,CACJgB,QADI,SACIC,GACNJ,KAAKT,YAAL,iCAAwBS,KAAKT,aAAgBa,IAE/CC,WAAW,IAGfC,QAAS,CAEPC,WAFO,SAEIC,GACTR,KAAKT,YAAYI,YAAca,EAE3BA,EAAOR,KAAKT,YAAYE,YAAcO,KAAKT,YAAYC,OAC3DQ,KAAKS,YAEPC,WARO,SAQIvB,GACTa,KAAKT,YAAYE,YAAcN,EAC/Ba,KAAKS,YAGPA,SAbO,WAcS,SAAdT,KAAKhB,KAAkBgB,KAAKW,eAAiBX,KAAKY,iBAGpDD,aAjBO,WAkBLX,KAAKa,QAGPD,cArBO,WAqB6B,IAAtBE,EAAsB,uDAAVjC,EACxBmB,KAAKe,YAAcf,KAAKgB,cAAcF,GACtCd,KAAKiB,eAAiBjB,KAAKkB,cAAcpC,IAG3CqC,iBA1BO,SA0BUC,EAAMC,GAErB,OADArB,KAAKsB,YAAYF,EAAMC,GAChBrB,KAAKgB,cAAcI,IAG5BE,YA/BO,SA+BKF,EAAMC,GAChBxC,EAAWuC,EACXtC,EAAcuC,GAGhBL,cApCO,WAoC6B,IAAtBF,EAAsB,uDAAVjC,EACxB,IAAKmB,KAAKb,KAAM,OAAO2B,EACvB,IAAM3B,EAAOa,KAAKT,YAAYE,YACxBe,EAAOR,KAAKT,YAAYI,YACxB4B,GAASpC,EAAO,GAAKqB,EACrBgB,EAAMrC,EAAOqB,EACnB,OAAOM,EAAUW,MAAMF,EAAOC","file":"js/chunk-2d0dd3e2.2daa984c.js","sourcesContent":["// 只是保存数据，不需要双向绑定那套重逻辑\n\n// 前端分页需要保存初始数据，从里面切割\n// eslint-disable-next-line import/no-mutable-exports\nexport let initRows = [];\n// 前端分页需要保存初始数据，重新计算表头宽度\n// eslint-disable-next-line import/no-mutable-exports\nexport let initColumns = [];\n\nexport default {\n  props: {\n    type: {\n      type: String,\n      default: 'back',\n    },\n    // 分页相关参数,详情参照element 的分页组件,可通过false取消分页\n    page: {\n      type: [Object, Boolean],\n      default: () => ({}),\n    },\n  },\n  data() {\n    return {\n      // 分页\n      pageOptions: {\n        total: 0,\n        currentPage: 1,\n        layout: 'prev, pager, next',\n        currentSize: 10,\n        // pageSizes: [10, 20, 30, 40, 50],\n        // layout: 'total, sizes, prev, pager, next, jumper',\n      },\n    };\n  },\n  computed: {\n    // 分页参数\n    pageParams() {\n      const backPageParams = {\n        pageNumber: this.pageOptions.currentPage,\n        pageSize: this.pageOptions.currentSize,\n      };\n      return this.type === 'back' && this.page ? backPageParams : {};\n    },\n  },\n  watch: {\n    page: {\n      handler(val) {\n        this.pageOptions = { ...this.pageOptions, ...val };\n      },\n      immediate: true,\n    },\n  },\n  methods: {\n    // 分页事件\n    sizeChange(size) {\n      this.pageOptions.currentSize = size;\n      // elementUI会处理成最后一页，触发pageChange\n      if (size * this.pageOptions.currentPage > this.pageOptions.total) return;\n      this.pageMain();\n    },\n    pageChange(page) {\n      this.pageOptions.currentPage = page;\n      this.pageMain();\n    },\n    // 分页主逻辑函数\n    pageMain() {\n      this.type === 'back' ? this.backPageMain() : this.frontPageMain();\n    },\n    // 后端分页主逻辑\n    backPageMain() {\n      this.load();\n    },\n    // 前端分页主逻辑\n    frontPageMain(_initRows = initRows) {\n      this.currentRows = this.getSlicesRows(_initRows);\n      this.currentColumns = this.handleColumns(initColumns);\n    },\n    // 获取前端分页的数据\n    getFrontPageRows(rows, columns) {\n      this.setInitData(rows, columns);\n      return this.getSlicesRows(rows);\n    },\n    // 设置前端分页需要保存的初始数据\n    setInitData(rows, columns) {\n      initRows = rows;\n      initColumns = columns;\n    },\n    // 获取切割后的数据\n    getSlicesRows(_initRows = initRows) {\n      if (!this.page) return _initRows;\n      const page = this.pageOptions.currentPage;\n      const size = this.pageOptions.currentSize;\n      const start = (page - 1) * size;\n      const end = page * size;\n      return _initRows.slice(start, end);\n    },\n  },\n};\n"],"sourceRoot":""}